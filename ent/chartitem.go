// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"main/ent/chartitem"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// ChartItem is the model entity for the ChartItem schema.
type ChartItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChartItem) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case chartitem.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case chartitem.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ChartItem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChartItem fields.
func (ci *ChartItem) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chartitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ci.ID = int(value.Int64)
		case chartitem.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				ci.Price = value.Float64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ChartItem.
// Note that you need to call ChartItem.Unwrap() before calling this method if this ChartItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (ci *ChartItem) Update() *ChartItemUpdateOne {
	return (&ChartItemClient{config: ci.config}).UpdateOne(ci)
}

// Unwrap unwraps the ChartItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ci *ChartItem) Unwrap() *ChartItem {
	tx, ok := ci.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChartItem is not a transactional entity")
	}
	ci.config.driver = tx.drv
	return ci
}

// String implements the fmt.Stringer.
func (ci *ChartItem) String() string {
	var builder strings.Builder
	builder.WriteString("ChartItem(")
	builder.WriteString(fmt.Sprintf("id=%v", ci.ID))
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", ci.Price))
	builder.WriteByte(')')
	return builder.String()
}

// ChartItems is a parsable slice of ChartItem.
type ChartItems []*ChartItem

func (ci ChartItems) config(cfg config) {
	for _i := range ci {
		ci[_i].config = cfg
	}
}
