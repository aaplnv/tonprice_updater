// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"main/ent/rubchart"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// RUBChart is the model entity for the RUBChart schema.
type RUBChart struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RUBChart) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case rubchart.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case rubchart.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type RUBChart", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RUBChart fields.
func (rc *RUBChart) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rubchart.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rc.ID = int(value.Int64)
		case rubchart.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				rc.Price = value.Float64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this RUBChart.
// Note that you need to call RUBChart.Unwrap() before calling this method if this RUBChart
// was returned from a transaction, and the transaction was committed or rolled back.
func (rc *RUBChart) Update() *RUBChartUpdateOne {
	return (&RUBChartClient{config: rc.config}).UpdateOne(rc)
}

// Unwrap unwraps the RUBChart entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rc *RUBChart) Unwrap() *RUBChart {
	tx, ok := rc.config.driver.(*txDriver)
	if !ok {
		panic("ent: RUBChart is not a transactional entity")
	}
	rc.config.driver = tx.drv
	return rc
}

// String implements the fmt.Stringer.
func (rc *RUBChart) String() string {
	var builder strings.Builder
	builder.WriteString("RUBChart(")
	builder.WriteString(fmt.Sprintf("id=%v", rc.ID))
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", rc.Price))
	builder.WriteByte(')')
	return builder.String()
}

// RUBCharts is a parsable slice of RUBChart.
type RUBCharts []*RUBChart

func (rc RUBCharts) config(cfg config) {
	for _i := range rc {
		rc[_i].config = cfg
	}
}
