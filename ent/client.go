// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"main/ent/migrate"

	"main/ent/euroquote"
	"main/ent/rubquote"
	"main/ent/uahquote"
	"main/ent/usdquote"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// EUROQuote is the client for interacting with the EUROQuote builders.
	EUROQuote *EUROQuoteClient
	// RUBQuote is the client for interacting with the RUBQuote builders.
	RUBQuote *RUBQuoteClient
	// UAHQuote is the client for interacting with the UAHQuote builders.
	UAHQuote *UAHQuoteClient
	// USDQuote is the client for interacting with the USDQuote builders.
	USDQuote *USDQuoteClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.EUROQuote = NewEUROQuoteClient(c.config)
	c.RUBQuote = NewRUBQuoteClient(c.config)
	c.UAHQuote = NewUAHQuoteClient(c.config)
	c.USDQuote = NewUSDQuoteClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		EUROQuote: NewEUROQuoteClient(cfg),
		RUBQuote:  NewRUBQuoteClient(cfg),
		UAHQuote:  NewUAHQuoteClient(cfg),
		USDQuote:  NewUSDQuoteClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		EUROQuote: NewEUROQuoteClient(cfg),
		RUBQuote:  NewRUBQuoteClient(cfg),
		UAHQuote:  NewUAHQuoteClient(cfg),
		USDQuote:  NewUSDQuoteClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		EUROQuote.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.EUROQuote.Use(hooks...)
	c.RUBQuote.Use(hooks...)
	c.UAHQuote.Use(hooks...)
	c.USDQuote.Use(hooks...)
}

// EUROQuoteClient is a client for the EUROQuote schema.
type EUROQuoteClient struct {
	config
}

// NewEUROQuoteClient returns a client for the EUROQuote from the given config.
func NewEUROQuoteClient(c config) *EUROQuoteClient {
	return &EUROQuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `euroquote.Hooks(f(g(h())))`.
func (c *EUROQuoteClient) Use(hooks ...Hook) {
	c.hooks.EUROQuote = append(c.hooks.EUROQuote, hooks...)
}

// Create returns a create builder for EUROQuote.
func (c *EUROQuoteClient) Create() *EUROQuoteCreate {
	mutation := newEUROQuoteMutation(c.config, OpCreate)
	return &EUROQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EUROQuote entities.
func (c *EUROQuoteClient) CreateBulk(builders ...*EUROQuoteCreate) *EUROQuoteCreateBulk {
	return &EUROQuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EUROQuote.
func (c *EUROQuoteClient) Update() *EUROQuoteUpdate {
	mutation := newEUROQuoteMutation(c.config, OpUpdate)
	return &EUROQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EUROQuoteClient) UpdateOne(eq *EUROQuote) *EUROQuoteUpdateOne {
	mutation := newEUROQuoteMutation(c.config, OpUpdateOne, withEUROQuote(eq))
	return &EUROQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EUROQuoteClient) UpdateOneID(id int) *EUROQuoteUpdateOne {
	mutation := newEUROQuoteMutation(c.config, OpUpdateOne, withEUROQuoteID(id))
	return &EUROQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EUROQuote.
func (c *EUROQuoteClient) Delete() *EUROQuoteDelete {
	mutation := newEUROQuoteMutation(c.config, OpDelete)
	return &EUROQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EUROQuoteClient) DeleteOne(eq *EUROQuote) *EUROQuoteDeleteOne {
	return c.DeleteOneID(eq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EUROQuoteClient) DeleteOneID(id int) *EUROQuoteDeleteOne {
	builder := c.Delete().Where(euroquote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EUROQuoteDeleteOne{builder}
}

// Query returns a query builder for EUROQuote.
func (c *EUROQuoteClient) Query() *EUROQuoteQuery {
	return &EUROQuoteQuery{
		config: c.config,
	}
}

// Get returns a EUROQuote entity by its id.
func (c *EUROQuoteClient) Get(ctx context.Context, id int) (*EUROQuote, error) {
	return c.Query().Where(euroquote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EUROQuoteClient) GetX(ctx context.Context, id int) *EUROQuote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EUROQuoteClient) Hooks() []Hook {
	return c.hooks.EUROQuote
}

// RUBQuoteClient is a client for the RUBQuote schema.
type RUBQuoteClient struct {
	config
}

// NewRUBQuoteClient returns a client for the RUBQuote from the given config.
func NewRUBQuoteClient(c config) *RUBQuoteClient {
	return &RUBQuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rubquote.Hooks(f(g(h())))`.
func (c *RUBQuoteClient) Use(hooks ...Hook) {
	c.hooks.RUBQuote = append(c.hooks.RUBQuote, hooks...)
}

// Create returns a create builder for RUBQuote.
func (c *RUBQuoteClient) Create() *RUBQuoteCreate {
	mutation := newRUBQuoteMutation(c.config, OpCreate)
	return &RUBQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RUBQuote entities.
func (c *RUBQuoteClient) CreateBulk(builders ...*RUBQuoteCreate) *RUBQuoteCreateBulk {
	return &RUBQuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RUBQuote.
func (c *RUBQuoteClient) Update() *RUBQuoteUpdate {
	mutation := newRUBQuoteMutation(c.config, OpUpdate)
	return &RUBQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RUBQuoteClient) UpdateOne(rq *RUBQuote) *RUBQuoteUpdateOne {
	mutation := newRUBQuoteMutation(c.config, OpUpdateOne, withRUBQuote(rq))
	return &RUBQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RUBQuoteClient) UpdateOneID(id int) *RUBQuoteUpdateOne {
	mutation := newRUBQuoteMutation(c.config, OpUpdateOne, withRUBQuoteID(id))
	return &RUBQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RUBQuote.
func (c *RUBQuoteClient) Delete() *RUBQuoteDelete {
	mutation := newRUBQuoteMutation(c.config, OpDelete)
	return &RUBQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RUBQuoteClient) DeleteOne(rq *RUBQuote) *RUBQuoteDeleteOne {
	return c.DeleteOneID(rq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RUBQuoteClient) DeleteOneID(id int) *RUBQuoteDeleteOne {
	builder := c.Delete().Where(rubquote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RUBQuoteDeleteOne{builder}
}

// Query returns a query builder for RUBQuote.
func (c *RUBQuoteClient) Query() *RUBQuoteQuery {
	return &RUBQuoteQuery{
		config: c.config,
	}
}

// Get returns a RUBQuote entity by its id.
func (c *RUBQuoteClient) Get(ctx context.Context, id int) (*RUBQuote, error) {
	return c.Query().Where(rubquote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RUBQuoteClient) GetX(ctx context.Context, id int) *RUBQuote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RUBQuoteClient) Hooks() []Hook {
	return c.hooks.RUBQuote
}

// UAHQuoteClient is a client for the UAHQuote schema.
type UAHQuoteClient struct {
	config
}

// NewUAHQuoteClient returns a client for the UAHQuote from the given config.
func NewUAHQuoteClient(c config) *UAHQuoteClient {
	return &UAHQuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `uahquote.Hooks(f(g(h())))`.
func (c *UAHQuoteClient) Use(hooks ...Hook) {
	c.hooks.UAHQuote = append(c.hooks.UAHQuote, hooks...)
}

// Create returns a create builder for UAHQuote.
func (c *UAHQuoteClient) Create() *UAHQuoteCreate {
	mutation := newUAHQuoteMutation(c.config, OpCreate)
	return &UAHQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UAHQuote entities.
func (c *UAHQuoteClient) CreateBulk(builders ...*UAHQuoteCreate) *UAHQuoteCreateBulk {
	return &UAHQuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UAHQuote.
func (c *UAHQuoteClient) Update() *UAHQuoteUpdate {
	mutation := newUAHQuoteMutation(c.config, OpUpdate)
	return &UAHQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UAHQuoteClient) UpdateOne(uq *UAHQuote) *UAHQuoteUpdateOne {
	mutation := newUAHQuoteMutation(c.config, OpUpdateOne, withUAHQuote(uq))
	return &UAHQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UAHQuoteClient) UpdateOneID(id int) *UAHQuoteUpdateOne {
	mutation := newUAHQuoteMutation(c.config, OpUpdateOne, withUAHQuoteID(id))
	return &UAHQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UAHQuote.
func (c *UAHQuoteClient) Delete() *UAHQuoteDelete {
	mutation := newUAHQuoteMutation(c.config, OpDelete)
	return &UAHQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UAHQuoteClient) DeleteOne(uq *UAHQuote) *UAHQuoteDeleteOne {
	return c.DeleteOneID(uq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UAHQuoteClient) DeleteOneID(id int) *UAHQuoteDeleteOne {
	builder := c.Delete().Where(uahquote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UAHQuoteDeleteOne{builder}
}

// Query returns a query builder for UAHQuote.
func (c *UAHQuoteClient) Query() *UAHQuoteQuery {
	return &UAHQuoteQuery{
		config: c.config,
	}
}

// Get returns a UAHQuote entity by its id.
func (c *UAHQuoteClient) Get(ctx context.Context, id int) (*UAHQuote, error) {
	return c.Query().Where(uahquote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UAHQuoteClient) GetX(ctx context.Context, id int) *UAHQuote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UAHQuoteClient) Hooks() []Hook {
	return c.hooks.UAHQuote
}

// USDQuoteClient is a client for the USDQuote schema.
type USDQuoteClient struct {
	config
}

// NewUSDQuoteClient returns a client for the USDQuote from the given config.
func NewUSDQuoteClient(c config) *USDQuoteClient {
	return &USDQuoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usdquote.Hooks(f(g(h())))`.
func (c *USDQuoteClient) Use(hooks ...Hook) {
	c.hooks.USDQuote = append(c.hooks.USDQuote, hooks...)
}

// Create returns a create builder for USDQuote.
func (c *USDQuoteClient) Create() *USDQuoteCreate {
	mutation := newUSDQuoteMutation(c.config, OpCreate)
	return &USDQuoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of USDQuote entities.
func (c *USDQuoteClient) CreateBulk(builders ...*USDQuoteCreate) *USDQuoteCreateBulk {
	return &USDQuoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for USDQuote.
func (c *USDQuoteClient) Update() *USDQuoteUpdate {
	mutation := newUSDQuoteMutation(c.config, OpUpdate)
	return &USDQuoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *USDQuoteClient) UpdateOne(uq *USDQuote) *USDQuoteUpdateOne {
	mutation := newUSDQuoteMutation(c.config, OpUpdateOne, withUSDQuote(uq))
	return &USDQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *USDQuoteClient) UpdateOneID(id int) *USDQuoteUpdateOne {
	mutation := newUSDQuoteMutation(c.config, OpUpdateOne, withUSDQuoteID(id))
	return &USDQuoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for USDQuote.
func (c *USDQuoteClient) Delete() *USDQuoteDelete {
	mutation := newUSDQuoteMutation(c.config, OpDelete)
	return &USDQuoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *USDQuoteClient) DeleteOne(uq *USDQuote) *USDQuoteDeleteOne {
	return c.DeleteOneID(uq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *USDQuoteClient) DeleteOneID(id int) *USDQuoteDeleteOne {
	builder := c.Delete().Where(usdquote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &USDQuoteDeleteOne{builder}
}

// Query returns a query builder for USDQuote.
func (c *USDQuoteClient) Query() *USDQuoteQuery {
	return &USDQuoteQuery{
		config: c.config,
	}
}

// Get returns a USDQuote entity by its id.
func (c *USDQuoteClient) Get(ctx context.Context, id int) (*USDQuote, error) {
	return c.Query().Where(usdquote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *USDQuoteClient) GetX(ctx context.Context, id int) *USDQuote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *USDQuoteClient) Hooks() []Hook {
	return c.hooks.USDQuote
}
